fielder_primary <- pos_long %>%
count(year, player_id, position, name = "fld_count") %>%
group_by(year, player_id) %>%
slice_max(order_by = fld_count, n = 1, with_ties = FALSE) %>%
ungroup() %>%
mutate(total_fld = fld_count,
fld_pos   = if_else(total_fld >= min_fld, position, NA_character_)) %>%
select(year, player_id, fld_pos, total_fld)
# 3) Count pitcher appearances
pitcher_primary <- data_all %>%
count(year, player_id = pitcher_id, name = "pitch_count") %>%
filter(!is.na(player_id))
# 4) Combine and apply rules
position_map <- full_join(fielder_primary, pitcher_primary,
by = c("year","player_id")) %>%
replace_na(list(total_fld = 0, pitch_count = 0)) %>%
mutate(primary_position = case_when(!is.na(fld_pos) ~ fld_pos,
total_fld == 0 & pitch_count > min_pit ~ "P",
TRUE ~ "DH")) %>%
select(year, player_id, primary_position)
# 5) Join back onto batter‐level data
df_woba <- df_woba %>%
left_join(position_map,
by = c("year", "batter_id" = "player_id")) %>%
mutate(primary_position = ifelse(is.na(primary_position), "DH",
primary_position)) %>%
mutate(primary_position = ifelse(batter_name == "Ohtani, Shohei", "DH",
primary_position)) %>%
filter(primary_position != "P") # Remove pitchers
return(df_woba)
}
df_woba <- woba_summary_by_player_season(data_all) %>%
#filter(year >= 2021) %>%
mutate(season_id = as.integer(factor(year, levels = sort(unique(year)))))
df_woba
df_woba <- get_positions()
df_woba <- get_positions(data_all, df_woba)
rlang::last_trace()
# Thresholds
min_fld <- 4000    # very few fielder apps → DH
min_pit <- 10      # need >10 pitcher apps to be “P”
get_positions <- function(data_all = data_all,
df_woba = df_woba,
min_fld = min_fld,
min_pit = min_pit) {
# materialize the thresholds as plain variables
fld_thr <- min_fld
pit_thr <- min_pit
# 1) Pivot fielder columns long
pos_long <- data_all %>%
select(year, starts_with("fielder_")) %>%
pivot_longer(cols            = starts_with("fielder_"),
names_to        = "field_col",
values_to       = "player_id",
values_drop_na  = TRUE) %>%
mutate(position = case_when(field_col == "fielder_2_id" ~ "C",
field_col == "fielder_3_id" ~ "1B",
field_col == "fielder_4_id" ~ "2B",
field_col == "fielder_5_id" ~ "3B",
field_col == "fielder_6_id" ~ "SS",
field_col == "fielder_7_id" ~ "LF",
field_col == "fielder_8_id" ~ "CF",
field_col == "fielder_9_id" ~ "RF",
TRUE ~ NA_character_)) %>%
filter(!is.na(position))
# 2) Count fielder appearances and pick most frequent spot
fielder_primary <- pos_long %>%
count(year, player_id, position, name = "fld_count") %>%
group_by(year, player_id) %>%
slice_max(order_by = fld_count, n = 1, with_ties = FALSE) %>%
ungroup() %>%
mutate(total_fld = fld_count,
fld_pos   = if_else(total_fld >= fld_thr, position, NA_character_)) %>%
select(year, player_id, fld_pos, total_fld)
# 3) Count pitcher appearances
pitcher_primary <- data_all %>%
count(year, player_id = pitcher_id, name = "pitch_count") %>%
filter(!is.na(player_id))
# 4) Combine and apply rules
position_map <- full_join(fielder_primary, pitcher_primary,
by = c("year","player_id")) %>%
replace_na(list(total_fld = 0, pitch_count = 0)) %>%
mutate(primary_position = case_when(!is.na(fld_pos) ~ fld_pos,
total_fld == 0 & pitch_count > pit_thr ~ "P",
TRUE ~ "DH")) %>%
select(year, player_id, primary_position)
# 5) Join back onto batter‐level data
df_woba <- df_woba %>%
left_join(position_map,
by = c("year", "batter_id" = "player_id")) %>%
mutate(primary_position = ifelse(is.na(primary_position), "DH",
primary_position)) %>%
mutate(primary_position = ifelse(batter_name == "Ohtani, Shohei", "DH",
primary_position)) %>%
filter(primary_position != "P") # Remove pitchers
return(df_woba)
}
df_woba <- get_positions()
df_woba <- get_positions(data_all, df_woba)
df_woba <- woba_summary_by_player_season(data_all) %>%
#filter(year >= 2021) %>%
mutate(season_id = as.integer(factor(year, levels = sort(unique(year)))))
get_positions <- function(data_all = data_all,
df_woba = df_woba,
min_fld = min_fld,
min_pit = min_pit) {
# materialize the thresholds as plain variables
fld_thr <- min_fld
pit_thr <- min_pit
# 1) Pivot fielder columns long
pos_long <- data_all %>%
select(year, starts_with("fielder_")) %>%
pivot_longer(cols            = starts_with("fielder_"),
names_to        = "field_col",
values_to       = "player_id",
values_drop_na  = TRUE) %>%
mutate(position = case_when(field_col == "fielder_2_id" ~ "C",
field_col == "fielder_3_id" ~ "1B",
field_col == "fielder_4_id" ~ "2B",
field_col == "fielder_5_id" ~ "3B",
field_col == "fielder_6_id" ~ "SS",
field_col == "fielder_7_id" ~ "LF",
field_col == "fielder_8_id" ~ "CF",
field_col == "fielder_9_id" ~ "RF",
TRUE ~ NA_character_)) %>%
filter(!is.na(position))
# 2) Count fielder appearances and pick most frequent spot
fielder_primary <- pos_long %>%
count(year, player_id, position, name = "fld_count") %>%
group_by(year, player_id) %>%
slice_max(order_by = fld_count, n = 1, with_ties = FALSE) %>%
ungroup() %>%
mutate(total_fld = fld_count,
fld_pos   = if_else(total_fld >= fld_thr, position, NA_character_)) %>%
select(year, player_id, fld_pos, total_fld)
# 3) Count pitcher appearances
pitcher_primary <- data_all %>%
count(year, player_id = pitcher_id, name = "pitch_count") %>%
filter(!is.na(player_id))
# 4) Combine and apply rules
position_map <- full_join(fielder_primary, pitcher_primary,
by = c("year","player_id")) %>%
replace_na(list(total_fld = 0, pitch_count = 0)) %>%
mutate(primary_position = case_when(!is.na(fld_pos) ~ fld_pos,
total_fld == 0 & pitch_count > pit_thr ~ "P",
TRUE ~ "DH")) %>%
select(year, player_id, primary_position)
# 5) Join back onto batter‐level data
df_woba <- df_woba %>%
left_join(position_map,
by = c("year", "batter_id" = "player_id")) %>%
mutate(primary_position = ifelse(is.na(primary_position), "DH",
primary_position)) %>%
mutate(primary_position = ifelse(batter_name == "Ohtani, Shohei", "DH",
primary_position)) %>%
filter(primary_position != "P") # Remove pitchers
return(df_woba)
}
df_woba <- get_positions(data_all, df_woba)
get_positions <- function(data_all = data_all,
df_woba = df_woba,
min_fld = 4000,
min_pit = 10) {
# materialize the thresholds as plain variables
fld_thr <- min_fld
pit_thr <- min_pit
# 1) Pivot fielder columns long
pos_long <- data_all %>%
select(year, starts_with("fielder_")) %>%
pivot_longer(cols            = starts_with("fielder_"),
names_to        = "field_col",
values_to       = "player_id",
values_drop_na  = TRUE) %>%
mutate(position = case_when(field_col == "fielder_2_id" ~ "C",
field_col == "fielder_3_id" ~ "1B",
field_col == "fielder_4_id" ~ "2B",
field_col == "fielder_5_id" ~ "3B",
field_col == "fielder_6_id" ~ "SS",
field_col == "fielder_7_id" ~ "LF",
field_col == "fielder_8_id" ~ "CF",
field_col == "fielder_9_id" ~ "RF",
TRUE ~ NA_character_)) %>%
filter(!is.na(position))
# 2) Count fielder appearances and pick most frequent spot
fielder_primary <- pos_long %>%
count(year, player_id, position, name = "fld_count") %>%
group_by(year, player_id) %>%
slice_max(order_by = fld_count, n = 1, with_ties = FALSE) %>%
ungroup() %>%
mutate(total_fld = fld_count,
fld_pos   = if_else(total_fld >= fld_thr, position, NA_character_)) %>%
select(year, player_id, fld_pos, total_fld)
# 3) Count pitcher appearances
pitcher_primary <- data_all %>%
count(year, player_id = pitcher_id, name = "pitch_count") %>%
filter(!is.na(player_id))
# 4) Combine and apply rules
position_map <- full_join(fielder_primary, pitcher_primary,
by = c("year","player_id")) %>%
replace_na(list(total_fld = 0, pitch_count = 0)) %>%
mutate(primary_position = case_when(!is.na(fld_pos) ~ fld_pos,
total_fld == 0 & pitch_count > pit_thr ~ "P",
TRUE ~ "DH")) %>%
select(year, player_id, primary_position)
# 5) Join back onto batter‐level data
df_woba <- df_woba %>%
left_join(position_map,
by = c("year", "batter_id" = "player_id")) %>%
mutate(primary_position = ifelse(is.na(primary_position), "DH",
primary_position)) %>%
mutate(primary_position = ifelse(batter_name == "Ohtani, Shohei", "DH",
primary_position)) %>%
filter(primary_position != "P") # Remove pitchers
return(df_woba)
}
df_woba <- get_positions(data_all, df_woba)
df_woba %>%
filter(batter_id == 443558) #%>%
dim(df_woba)
get_positions <- function(data_all = data_all,
df_woba = df_woba,
min_fld = 4000,
min_pit = 10) {
# 1) Pivot fielder columns long
pos_long <- data_all %>%
select(year, starts_with("fielder_")) %>%
pivot_longer(cols            = starts_with("fielder_"),
names_to        = "field_col",
values_to       = "player_id",
values_drop_na  = TRUE) %>%
mutate(position = case_when(field_col == "fielder_2_id" ~ "C",
field_col == "fielder_3_id" ~ "1B",
field_col == "fielder_4_id" ~ "2B",
field_col == "fielder_5_id" ~ "3B",
field_col == "fielder_6_id" ~ "SS",
field_col == "fielder_7_id" ~ "LF",
field_col == "fielder_8_id" ~ "CF",
field_col == "fielder_9_id" ~ "RF",
TRUE ~ NA_character_)) %>%
filter(!is.na(position))
# 2) Count fielder appearances and pick most frequent spot
fielder_primary <- pos_long %>%
count(year, player_id, position, name = "fld_count") %>%
group_by(year, player_id) %>%
slice_max(order_by = fld_count, n = 1, with_ties = FALSE) %>%
ungroup() %>%
mutate(total_fld = fld_count,
fld_pos   = if_else(total_fld >= min_fld, position, NA_character_)) %>%
select(year, player_id, fld_pos, total_fld)
# 3) Count pitcher appearances
pitcher_primary <- data_all %>%
count(year, player_id = pitcher_id, name = "pitch_count") %>%
filter(!is.na(player_id))
# 4) Combine and apply rules
position_map <- full_join(fielder_primary, pitcher_primary,
by = c("year","player_id")) %>%
replace_na(list(total_fld = 0, pitch_count = 0)) %>%
mutate(primary_position = case_when(!is.na(fld_pos) ~ fld_pos,
total_fld == 0 & pitch_count > min_pit ~ "P",
TRUE ~ "DH")) %>%
select(year, player_id, primary_position)
# 5) Join back onto batter‐level data
df_woba <- df_woba %>%
left_join(position_map,
by = c("year", "batter_id" = "player_id")) %>%
mutate(primary_position = ifelse(is.na(primary_position), "DH",
primary_position)) %>%
mutate(primary_position = ifelse(batter_name == "Ohtani, Shohei", "DH",
primary_position)) %>%
filter(primary_position != "P") # Remove pitchers
return(df_woba)
}
df_woba <- get_positions()
df_woba <- get_positions(data_all, df_woba)
df_woba <- woba_summary_by_player_season(data_all) %>%
#filter(year >= 2021) %>%
mutate(season_id = as.integer(factor(year, levels = sort(unique(year)))))
get_positions <- function(data_all = data_all,
df_woba = df_woba,
min_fld = 4000,
min_pit = 10) {
# 1) Pivot fielder columns long
pos_long <- data_all %>%
select(year, starts_with("fielder_")) %>%
pivot_longer(cols            = starts_with("fielder_"),
names_to        = "field_col",
values_to       = "player_id",
values_drop_na  = TRUE) %>%
mutate(position = case_when(field_col == "fielder_2_id" ~ "C",
field_col == "fielder_3_id" ~ "1B",
field_col == "fielder_4_id" ~ "2B",
field_col == "fielder_5_id" ~ "3B",
field_col == "fielder_6_id" ~ "SS",
field_col == "fielder_7_id" ~ "LF",
field_col == "fielder_8_id" ~ "CF",
field_col == "fielder_9_id" ~ "RF",
TRUE ~ NA_character_)) %>%
filter(!is.na(position))
# 2) Count fielder appearances and pick most frequent spot
fielder_primary <- pos_long %>%
count(year, player_id, position, name = "fld_count") %>%
group_by(year, player_id) %>%
slice_max(order_by = fld_count, n = 1, with_ties = FALSE) %>%
ungroup() %>%
mutate(total_fld = fld_count,
fld_pos   = if_else(total_fld >= min_fld, position, NA_character_)) %>%
select(year, player_id, fld_pos, total_fld)
# 3) Count pitcher appearances
pitcher_primary <- data_all %>%
count(year, player_id = pitcher_id, name = "pitch_count") %>%
filter(!is.na(player_id))
# 4) Combine and apply rules
position_map <- full_join(fielder_primary, pitcher_primary,
by = c("year","player_id")) %>%
replace_na(list(total_fld = 0, pitch_count = 0)) %>%
mutate(primary_position = case_when(!is.na(fld_pos) ~ fld_pos,
total_fld == 0 & pitch_count > min_pit ~ "P",
TRUE ~ "DH")) %>%
select(year, player_id, primary_position)
# 5) Join back onto batter‐level data
df_woba <- df_woba %>%
left_join(position_map,
by = c("year", "batter_id" = "player_id")) %>%
mutate(primary_position = ifelse(is.na(primary_position), "DH",
primary_position)) %>%
mutate(primary_position = ifelse(batter_name == "Ohtani, Shohei", "DH",
primary_position)) %>%
filter(primary_position != "P") # Remove pitchers
return(df_woba)
}
df_woba <- get_positions(data_all, df_woba)
df_woba %>%
filter(batter_id == 443558) #%>%
# 2) turn primary_position into an integer code 1..9
#    Our convention: 1="P", 2="C", 3="1B", 4="2B", 5="3B", 6="SS",
#                    7="LF", 8="CF", 9="RF"
pos_levels <- c("DH","C","1B","2B","3B","SS","LF","CF","RF")
df_woba <- df_woba %>%
mutate(pos_idx = match(primary_position, pos_levels))
df_woba
stan_code_wOBA_3 <- "
data {
int<lower=1>  J;                // number of player‐seasons
vector[J]     y;                // historical xwOBA
int<lower=0>  N[J];             // historical PA
matrix[J,4]   A_basis;          // B‐spline basis evaluated at age
int<lower=1>  pos[J];           // position index in 1..9
int<lower=1>  K_pos;            // =9
int<lower=1>  K_basis;          // =4
}
parameters {
real<lower=0,upper=1>         mu;            // global intercept
real<lower=0>                 tau;           // between‐player SD
real<lower=0>                 sigma;         // measurement noise scale
matrix[K_pos,K_basis]         gamma;         // age‐position spline coefs
vector[J]                     eta;           // player‐level deviations
}
transformed parameters {
vector[J] theta;
// construct theta_j = mu + f_{pos[j]}(age[j]) + eta[j]
for (j in 1:J) {
// dot product of the 4‐vector A_basis[j] with gamma[pos[j], ]
theta[j] = mu + dot_product( A_basis[j], gamma[pos[j]] ) + eta[j];
}
}
model {
// Priors
mu    ~ normal(0.320, 0.05); // league-average prior (0.320)
tau   ~ cauchy(0, 0.05);
sigma ~ cauchy(0, 0.05);
to_vector(gamma) ~ normal(0, 0.1);
eta   ~ normal(0, tau);
// Likelihood (if N[j]=0, no data term → pure prior)
for (j in 1:J) {
if (N[j] > 0)
y[j] ~ normal(theta[j], sigma / sqrt(N[j]));
}
}
generated quantities {
vector[J] stabilized_xwoba = theta;
}
"
# 3) assemble the stan data list
stan_data_woba <- list(J       = nrow(df_woba),
y       = df_woba$hist_xwoba,
N       = df_woba$hist_PA,
A_basis = Bmat,                # J×4 matrix
pos     = df_woba$pos_idx,     # length‑J integer vector (1..9)
K_pos   = length(pos_levels),  # 9
K_basis = ncol(Bmat))          # 4
# 4) Fit the model
fit <- stan(model_code = stan_code_wOBA_3,
data       = stan_data_woba,
iter       = 2000,
warmup     = 1000,
chains     = 4,
seed       = 123,
control    = list(adapt_delta = 0.95),
cores      = parallel::detectCores())
stan_data_woba
# 1) build your spline basis (4 basis functions, cubic) on age
#    The `intercept=TRUE` means B_1...B_4 sum to 1 at each age.
Bmat <- bs(df_woba$age, df = 4, degree = 3, intercept = TRUE)
dim(df_woba)
Bmat
Bmat[1]
Bmat[]
Bmat$
class(Bmat)
as.data.frame(Bmat)
# 3) assemble the stan data list
stan_data_woba <- list(J       = nrow(df_woba),
y       = df_woba$hist_xwoba,
N       = df_woba$hist_PA,
A_basis = as.data.frame(Bmat), # J×4 matrix
pos     = df_woba$pos_idx,     # length‑J integer vector (1..9)
K_pos   = length(pos_levels),  # 9
K_basis = ncol(Bmat))          # 4
# 4) Fit the model
fit <- stan(model_code = stan_code_wOBA_3,
data       = stan_data_woba,
iter       = 2000,
warmup     = 1000,
chains     = 4,
seed       = 123,
control    = list(adapt_delta = 0.95),
cores      = parallel::detectCores())
View(prior_appearances)
write.csv(data_all, "data_all.csv")
# 5) Extract posterior means (and CIs if you like)
post_samples <- extract(fit, pars = "stabilized_xwoba")$stabilized_xwoba
df_woba <- df_woba %>%
mutate(stab_xwoba = apply(post_samples, 2, mean),
ci_low     = apply(post_samples, 2, quantile, probs = 0.025),
ci_high    = apply(post_samples, 2, quantile, probs = 0.975))
tail(df_woba)
df_woba %>% filter(batter_name == "Stanton, Giancarlo")
df_woba %>% filter(batter_name == "Cabrera, Miguel")
library(ggplot2)
# pull out all gamma samples: an array [iterations × K_pos × K_basis]
gamma_samps <- rstan::extract(fit_ppc, pars="gamma")$gamma
# pull out all gamma samples: an array [iterations × K_pos × K_basis]
gamma_samps <- rstan::extract(fit, pars="gamma")$gamma
# summarise each position k’s spline coefficients
# e.g. posterior mean ± 95% CI
gamma_summary <- apply(gamma_samps, c(2,3), function(x)
c(mean = mean(x),
hdi_lower = quantile(x, .025),
hdi_upper = quantile(x, .975)))
dimnames(gamma_summary) <- list(
Position = pos_levels,     # c("P","C","1B",…)
Spline   = paste0("B",1:4),
Stat     = c("mean","hdi_lower","hdi_upper")
)
gamma_summary
pos_levels
# 2) turn primary_position into an integer code 1..9
#    Mapping: 1="DH", 2="C", 3="1B", 4="2B", 5="3B",
#             6="SS",7="LF", 8="CF", 9="RF"
pos_levels <- c("DH","C","1B","2B","3B","SS","LF","CF","RF")
length(pos_levels)
dimnames(gamma_summary) <- list(
Position = pos_levels,     # c("P","C","1B",…)
Spline   = paste0("B",1:4),
Stat     = c("mean","hdi_lower","hdi_upper")
)
summary(gamma_summary)
print(gamma_summary)
gamma_summary[[]]
gamma_summary[[]
gamma_summary[]
as.data.frame(gamma_summary)
dimnames(as.data.frame(gamma_summary)) <- list(
Position = pos_levels,     # c("P","C","1B",…)
Spline   = paste0("B",1:4),
Stat     = c("mean","hdi_lower","hdi_upper")
)
ages <- seq(min(df_woba$age), max(df_woba$age), length=100)
Bgrid <- bs(ages, df=4, degree=3, intercept=TRUE)
# for each draw t and position k, compute f_k(ages)
# this gives an array [draws × positions × ages]
f_draws <- array(NA, dim = c(
dim(gamma_samps)[1],   # draws
dim(gamma_samps)[2],   # positions
length(ages)
))
for (t in 1:dim(gamma_samps)[1]) {
f_draws[t,,] <- gamma_samps[t,,] %*% t(Bgrid)
}
# collapse to mean and 95% CI for each position at each age
f_mean <- apply(f_draws, c(2,3), mean)
f_lo   <- apply(f_draws, c(2,3), quantile, probs = .025)
f_hi   <- apply(f_draws, c(2,3), quantile, probs = .975)
# assemble a tidy data.frame for ggplot
plot_df <- expand.grid(
Position = pos_levels,
age      = ages
)
plot_df$mean <- as.vector(t(f_mean))
plot_df$lo   <- as.vector(t(f_lo))
plot_df$hi   <- as.vector(t(f_hi))
ggplot(plot_df, aes(age, mean, color = Position)) +
geom_line() +
geom_ribbon(aes(ymin = lo, ymax = hi, fill = Position),
alpha = 0.2, color = NA) +
labs(title = "Estimated age trajectories by position",
y = "f_k(age)", x = "Age")
posterior <- as.array(fit)
# 3a) R̂ and n_eff
print(fit, pars = c("mu","tau","sigma"), probs = c(.025,.5,.975))
# 3b) Traceplots for key parameters
mcmc_trace(posterior, pars = c("mu","tau","sigma"))
