beta_woba          ~ normal(0, 1);
beta_woba_on_deck  ~ normal(0, 1);
beta_balls         ~ normal(0, 1);
beta_strikes       ~ normal(0, 1);
beta_int_balls     ~ normal(0, 1);
beta_int_strikes   ~ normal(0, 1);
// Likelihood
for (i in 1:N) {
real nu = alpha
+ beta_woba           * woba[i]
+ beta_woba_on_deck   * woba_on_deck[i]
+ beta_balls          * balls[i]
+ beta_strikes        * strikes[i]
+ beta_int_balls      * (balls[i] * woba_on_deck[i])
+ beta_int_strikes    * (strikes[i] * woba_on_deck[i]);
y[i] ~ bernoulli_logit(nu);
}
}
"
print(fit_zone, pars = c("alpha", "beta_woba", "beta_woba_on_deck",
"beta_balls", "beta_strikes",
"beta_int_balls", "beta_int_strikes"),
probs = c(0.025, 0.5, 0.975))
data_t_reduced %>% group_by(balls, strikes) %>% summarize(k_rate = mean(in_strike_zone)) %>% as.data.frame()
data_t_reduced %>% group_by(balls, strikes) %>% summarize(n = n(), k_rate = mean(in_strike_zone)) %>% as.data.frame()
data_t_reduced <- data_t %>%
group_by(year, balls, strkes) %>%   # preserves the class balance
sample_frac(0.01) %>%          # adjust as needed (0.05 = 5%)
ungroup() %>%
as.data.frame()
data_t_reduced <- data_t %>%
group_by(year, balls, strikes) %>%   # preserves the class balance
sample_frac(0.01) %>%          # adjust as needed (0.05 = 5%)
ungroup() %>%
as.data.frame()
data_t_reduced %>% group_by(balls, strikes) %>% summarize(n = n(), k_rate = mean(in_strike_zone)) %>% as.data.frame()
stan_code_in_strike_zone <- "
data {
int<lower=1> N;                         // total number of pitches
int<lower=0,upper=1> y[N];              // 1 if pitch is in zone
vector[N] woba;                         // current batter’s wOBA
vector[N] woba_on_deck;                 // on‑deck batter’s wOBA
int<lower=0,upper=3> balls[N];          // balls in count
int<lower=0,upper=2> strikes[N];        // strikes in count
int<lower=1> N_pitchers;                // total unique pitchers
int<lower=1> N_batters;                 // total unique batters
int<lower=1,upper=N_pitchers> pitcher_id[N];
int<lower=1,upper=N_batters>  batter_id[N];
}
parameters {
real alpha;
real beta_woba;
real beta_woba_on_deck;
real beta_balls;
real beta_strikes;
real beta_int_balls;                    // interaction: balls × woba_on_deck
real beta_int_strikes;                  // interaction: strikes × woba_on_deck
}
model {
// Priors
alpha              ~ normal(0, 2);
beta_woba          ~ normal(0, 1);
beta_woba_on_deck  ~ normal(0, 1);
beta_balls         ~ normal(0, 1);
beta_strikes       ~ normal(0, 1);
beta_int_balls     ~ normal(0, 1);
beta_int_strikes   ~ normal(0, 1);
// Likelihood
for (i in 1:N) {
real nu = alpha
+ beta_woba           * woba[i]
+ beta_woba_on_deck   * woba_on_deck[i]
+ beta_balls          * balls[i]
+ beta_strikes        * strikes[i]
+ beta_int_balls      * (balls[i] * woba_on_deck[i])
+ beta_int_strikes    * (strikes[i] * woba_on_deck[i]);
y[i] ~ bernoulli_logit(nu);
}
}
"
data_t_reduced <- data_t %>%
group_by(year) %>%   # preserves the class balance
sample_frac(0.05) %>%          # adjust as needed (0.05 = 5%)
ungroup() %>%
as.data.frame()
data_t_reduced <- data_t %>%
group_by(year) %>%   # preserves the class balance
sample_frac(0.025) %>%          # adjust as needed (0.05 = 5%)
ungroup() %>%
as.data.frame()
stan_data <- list(N = nrow(data_t_reduced),
y = data_t_reduced$in_strike_zone,
woba = data_t_reduced$woba_c,
woba_on_deck = data_t_reduced$woba_on_deck_c,
balls = data_t_reduced$balls,
strikes = data_t_reduced$strikes,
outs = data_t_reduced$outs,
runners_on = data_t_reduced$runners_on_base,
N_pitchers = length(unique(as.integer(factor(
data_t_reduced$pitcher_id)))),
N_batters = length(unique(as.integer(factor(
data_t_reduced$batter_id)))),
pitcher_id = as.integer(factor(data_t_reduced$pitcher_id)),
batter_id = as.integer(factor(data_t_reduced$batter_id)))
# Function to plot P(Strike) as a function of count and on-deck wOBA
plot_effects <- function(fit) {
# Draws for the fixed effects
approx <- rstan::extract(fit, permuted = TRUE)
# Posterior means and 95% “credible intervals”
means <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
mean)
ci_low  <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
function(x) quantile(x,0.025))
ci_high <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
function(x) quantile(x,0.975))
data.frame(Parameter = names(means),
Mean = means,
`2.5%` = ci_low,
`97.5%` = ci_high)
# 1) Pull out posterior draws for the fixed effects
#    (must match your stan parameter names exactly)
draws <- approx
n_draws <- length(draws$alpha)
# 2) Build a regular grid:
wseq <- seq(min(data_t$woba_on_deck_c), max(data_t$woba_on_deck_c), length = 100)
grid <- expand.grid(woba_on_deck_c = wseq,
balls          = 0:3,
strikes        = 0:2) %>%
mutate(count = paste0(balls, "–", strikes))
# Fix all other covariates at “average” (centered) → zero
#   centered wOBA set to 0
woba_curr0  <- 0
# 3) For a subset of draws (to speed up), sample e.g. 200 indices
set.seed(42)
use_idx <- sample.int(n_draws, size = min(2000, n_draws))
# 4) Compute the linear predictor for each draw & each grid row
# 5) Transform to probabilities
p_mat <- plogis(sapply(use_idx, function(i) {
draws$alpha[i] +
draws$beta_woba[i]          * woba_curr0 +
draws$beta_woba_on_deck[i]  * grid$woba_on_deck_c +
draws$beta_balls[i]         * grid$balls +
draws$beta_strikes[i]       * grid$strikes +
draws$beta_int_balls[i]     * (grid$balls  * grid$woba_on_deck_c) +
draws$beta_int_strikes[i]   * (grid$strikes* grid$woba_on_deck_c)
}))
# 6) Summarize across draws: mean & 95% credible bands
grid <- grid %>%
mutate(p_mean = rowMeans(p_mat),
p_lo   = apply(p_mat, 1, quantile, probs = 0.025),
p_hi   = apply(p_mat, 1, quantile, probs = 0.975))
# 7) Plot faceted by count
ggplot(grid, aes(x = woba_on_deck_c/100 + mean(data_t$stabilized_xwoba_on_deck),
y = p_mean)) +
geom_ribbon(aes(ymin = p_lo, ymax = p_hi), fill = "steelblue", alpha = 0.2) +
geom_line(color = "steelblue", size = 1) +
facet_grid(strikes ~ balls, labeller = label_both) +
scale_x_continuous("On‑deck wOBA",
breaks = seq(0.25, 0.45, by = 0.05)) +
scale_y_continuous("P(strike)",
breaks = seq(0.2, 0.8, by = 0.1)) +
theme_minimal() +
ggtitle("Posterior 95% Credible Bands for P(strike) by Count
as a function of On‑deck wOBA")
}
#####
# MCMC Sampler
#####
fit_zone <- stan(model_code = stan_code_in_strike_zone,
data = stan_data,
iter = 2000,
warmup = 1000,
chains = 4,
seed = 42,
control = list(adapt_delta = 0.95),
cores = parallel::detectCores())
print(fit_zone, pars = c("alpha", "beta_woba", "beta_woba_on_deck",
"beta_balls", "beta_strikes",
"beta_int_balls", "beta_int_strikes"),
probs = c(0.025, 0.5, 0.975))
plot_effects(fit_zone)
# Function to plot P(Strike) as a function of count and on-deck wOBA
plot_effects <- function(fit) {
# Draws for the fixed effects
approx <- rstan::extract(fit, permuted = TRUE)
# Posterior means and 95% “credible intervals”
means <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
mean)
ci_low  <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
function(x) quantile(x,0.025))
ci_high <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
function(x) quantile(x,0.975))
data.frame(Parameter = names(means),
Mean = means,
`2.5%` = ci_low,
`97.5%` = ci_high)
# 1) Pull out posterior draws for the fixed effects
#    (must match your stan parameter names exactly)
draws <- approx
n_draws <- length(draws$alpha)
# 2) Build a regular grid:
wseq <- seq(min(data_t_reduced$woba_on_deck_c),
max(data_t_reduced$woba_on_deck_c), length = 100)
grid <- expand.grid(woba_on_deck_c = wseq,
balls          = 0:3,
strikes        = 0:2) %>%
mutate(count = paste0(balls, "–", strikes))
# Fix all other covariates at “average” (centered) → zero
#   centered wOBA set to 0
woba_curr0  <- 0
# 3) For a subset of draws (to speed up), sample e.g. 200 indices
set.seed(42)
use_idx <- sample.int(n_draws, size = min(2000, n_draws))
# 4) Compute the linear predictor for each draw & each grid row
# 5) Transform to probabilities
p_mat <- plogis(sapply(use_idx, function(i) {
draws$alpha[i] +
draws$beta_woba[i]          * woba_curr0 +
draws$beta_woba_on_deck[i]  * grid$woba_on_deck_c +
draws$beta_balls[i]         * grid$balls +
draws$beta_strikes[i]       * grid$strikes +
draws$beta_int_balls[i]     * (grid$balls  * grid$woba_on_deck_c) +
draws$beta_int_strikes[i]   * (grid$strikes* grid$woba_on_deck_c)
}))
# 6) Summarize across draws: mean & 95% credible bands
grid <- grid %>%
mutate(p_mean = rowMeans(p_mat),
p_lo   = apply(p_mat, 1, quantile, probs = 0.025),
p_hi   = apply(p_mat, 1, quantile, probs = 0.975))
# 7) Plot faceted by count
ggplot(grid, aes(x = woba_on_deck_c/100 + mean(data_t$stabilized_xwoba_on_deck),
y = p_mean)) +
geom_ribbon(aes(ymin = p_lo, ymax = p_hi), fill = "steelblue", alpha = 0.2) +
geom_line(color = "steelblue", size = 1) +
facet_grid(strikes ~ balls, labeller = label_both) +
scale_x_continuous("On‑deck wOBA",
breaks = seq(0.25, 0.45, by = 0.05)) +
scale_y_continuous("P(strike)",
breaks = seq(0.2, 0.8, by = 0.1)) +
theme_minimal() +
ggtitle("Posterior 95% Credible Bands for P(strike) by Count
as a function of On‑deck wOBA")
}
plot_effects(fit_zone)
print(fit_zone, pars = c("alpha", "beta_woba", "beta_woba_on_deck",
"beta_balls", "beta_strikes",
"beta_int_balls", "beta_int_strikes"),
probs = c(0.025, 0.5, 0.975))
head(df_woba)
summary(df_woba$age)
dimnames(as.matrix(gamma_summary)) <- list(
Position = pos_levels,     # c("P","C","1B",…)
Spline   = paste0("B",1:4),
Stat     = c("mean","hdi_lower","hdi_upper")
)
# pull out all gamma samples: an array [iterations × K_pos × K_basis]
gamma_samps <- rstan::extract(fit_wOBA, pars="gamma")$gamma
# summarise each position k’s spline coefficients
# e.g. posterior mean ± 95% CI
gamma_summary <- apply(gamma_samps, c(2,3), function(x)
c(mean = mean(x),
hdi_lower = quantile(x, .025),
hdi_upper = quantile(x, .975)))
print(gamma_summary)
ages <- seq(min(df_woba$age),
max(df_woba$age),
length = 100)
Bgrid <- bs(ages,
df = 4,
degree = 3,
intercept = TRUE)
# for each draw t and position k, compute f_k(ages)
# this gives an array [draws × positions × ages]
f_draws <- array(NA, dim = c(dim(gamma_samps)[1],   # draws
dim(gamma_samps)[2],   # positions
length(ages)))
for (t in 1:dim(gamma_samps)[1]) {
f_draws[t,,] <- gamma_samps[t,,] %*% t(Bgrid)
}
# collapse to mean and 95% CI for each position at each age
# assemble a tidy data.frame for ggplot
plot_df <- expand.grid(Position = pos_levels,
age      = ages) %>%
mutate(mean = as.vector(t(apply(f_draws, c(2,3), mean))),
lo   = as.vector(t(apply(f_draws, c(2,3), quantile, probs = .025))),
hi   = as.vector(t(apply(f_draws, c(2,3), quantile, probs = .975))))
ggplot(plot_df, aes(age, mean, color = Position)) +
geom_line() +
geom_ribbon(aes(ymin = lo, ymax = hi, fill = Position),
alpha = 0.2, color = NA) +
labs(title = "Estimated age trajectories by position",
y = "f_k(age)", x = "Age")
posterior <- as.array(fit_wOBA)
# 3a) R̂ and n_eff
print(fit_wOBA, pars = c("mu", "tau", "sigma"), probs = c(.025, .5, .975))
# 3b) Traceplots for key parameters
mcmc_trace(posterior, pars = c("mu", "tau", "sigma"))
# 3c) Pair‐plots for potential correlations
mcmc_pairs(posterior, pars = c("mu", "tau", "sigma"))
# 3a) R̂ and n_eff
print(fit_wOBA, pars = c("mu", "tau", "sigma", "eta"), probs = c(.025, .5, .975))
# 3a) R̂ and n_eff
print(fit_wOBA, pars = c("mu", "tau", "sigma"), probs = c(.025, .5, .975))
# extract observed y and replicated y
# 4a) Density overlay
ppc_dens_overlay(y = stan_data_wOBA$y,
yrep = rstan::extract(fit_wOBA, "y_rep")$y_rep[1:200, ]) +
ggtitle("PPC: observed vs rep hist_xwOBA")
# 4b) Scatter of mean & SD
ppc_stat(y = stan_data_wOBA$y,
yrep = rstan::extract(fit_wOBA, "y_rep")$y_rep[1:200, ],
stat = "mean")
# 3b) Traceplots for key parameters
mcmc_trace(posterior, pars = c("mu", "tau", "sigma"))
# extract observed y and replicated y
# 4a) Density overlay
ppc_dens_overlay(y = stan_data_wOBA$y,
yrep = rstan::extract(fit_wOBA, "y_rep")$y_rep[1:200, ]) +
ggtitle("PPC: observed vs rep hist_xwOBA") +
scale_x_continuous("wOBA",
limits = c(0, 0.5))
# extract observed y and replicated y
# 4a) Density overlay
ppc_dens_overlay(y = stan_data_wOBA$y,
yrep = rstan::extract(fit_wOBA, "y_rep")$y_rep[1:200, ]) +
ggtitle("PPC: Observed (y) vs rep hist_xwOBA") +
scale_x_continuous("wOBA",
limits = c(0, 0.5))
# extract observed y and replicated y
# 4a) Density overlay
ppc_dens_overlay(y = stan_data_wOBA$y,
yrep = rstan::extract(fit_wOBA, "y_rep")$y_rep[1:2000, ]) +
ggtitle("PPC: Observed (y) vs rep hist_xwOBA") +
scale_x_continuous("wOBA",
limits = c(0, 0.5))
plot(df_woba$hist_PA, resid, xlab = "PA", ylab = "Residual", main = "Residual vs PA") +
abline(h = 0, lty = 2)
length(df_woba$hist_PA)
length(df_woba$resid)
plot(df_woba$hist_PA, df_woba$resid,
xlab = "PA", ylab = "Residual", main = "Residual vs PA") +
abline(h = 0, lty = 2)
# 5) Extract posterior means (and CIs if you like)
df_woba <- df_woba %>%
mutate(stabilized_xwoba = apply(rstan::extract(fit_wOBA, pars = "theta")$theta, 2,
mean),
ci_low = apply(rstan::extract(fit_wOBA, pars = "theta")$theta, 2,
quantile,
probs = 0.025),
ci_high = apply(rstan::extract(fit_wOBA, pars = "theta")$theta, 2,
quantile,
probs = 0.975),
resid = hist_xwoba - stabilized_xwoba)
plot(df_woba$hist_PA, df_woba$resid,
xlab = "PA", ylab = "Residual", main = "Residual vs PA") +
abline(h = 0, lty = 2)
plot(df_woba$hist_PA, df_woba$resid,
xlab = "PA", ylab = "Residual", main = "Residual vs Plate Appearances") +
abline(h = 0, lty = 2)
print(fit_zone, pars = c("alpha", "beta_woba", "beta_woba_on_deck",
"beta_balls", "beta_strikes",
"beta_int_balls", "beta_int_strikes"),
probs = c(0.025, 0.5, 0.975))
plot_effects(fit_zone)
# Function to plot P(Strike) as a function of count and on-deck wOBA
plot_effects <- function(fit) {
# Draws for the fixed effects
approx <- rstan::extract(fit, permuted = TRUE)
# Posterior means and 95% “credible intervals”
means <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
mean)
ci_low  <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
function(x) quantile(x,0.025))
ci_high <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
function(x) quantile(x,0.975))
data.frame(Parameter = names(means),
Mean = means,
`2.5%` = ci_low,
`97.5%` = ci_high)
# 1) Pull out posterior draws for the fixed effects
#    (must match your stan parameter names exactly)
draws <- approx
n_draws <- length(draws$alpha)
# 2) Build a regular grid:
wseq <- seq(min(data_t_reduced$woba_on_deck_c),
max(data_t_reduced$woba_on_deck_c), length = 100)
grid <- expand.grid(woba_on_deck_c = wseq,
balls          = 0:3,
strikes        = 0:2) %>%
mutate(count = paste0(balls, "–", strikes))
# Fix all other covariates at “average” (centered) → zero
#   centered wOBA set to 0
woba_curr0  <- 0
# 3) For a subset of draws (to speed up), sample e.g. 200 indices
set.seed(42)
use_idx <- sample.int(n_draws, size = min(2000, n_draws))
# 4) Compute the linear predictor for each draw & each grid row
# 5) Transform to probabilities
p_mat <- plogis(sapply(use_idx, function(i) {
draws$alpha[i] +
draws$beta_woba[i]          * woba_curr0 +
draws$beta_woba_on_deck[i]  * grid$woba_on_deck_c +
draws$beta_balls[i]         * grid$balls +
draws$beta_strikes[i]       * grid$strikes +
draws$beta_int_balls[i]     * (grid$balls  * grid$woba_on_deck_c) +
draws$beta_int_strikes[i]   * (grid$strikes* grid$woba_on_deck_c)
}))
# 6) Summarize across draws: mean & 95% credible bands
grid <- grid %>%
mutate(p_mean = rowMeans(p_mat),
p_lo   = apply(p_mat, 1, quantile, probs = 0.025),
p_hi   = apply(p_mat, 1, quantile, probs = 0.975))
# 7) Plot faceted by count
ggplot(grid, aes(x = woba_on_deck_c/100 + mean(data_t$stabilized_xwoba_on_deck),
y = p_mean)) +
geom_ribbon(aes(ymin = p_lo, ymax = p_hi), fill = "steelblue", alpha = 0.2) +
geom_line(color = "steelblue", size = 1) +
facet_grid(strikes ~ balls, labeller = label_both) +
scale_x_continuous("On‑deck wOBA",
breaks = seq(0.25, 0.45, by = 0.05)) +
scale_y_continuous("P(strike)",
breaks = seq(0.2, 0.8, by = 0.1)) +
theme_minimal() +
ggtitle("Posterior 95% Credible Bands for P(strike) by Count as a function of On‑deck wOBA")
}
plot_effects(fit_zone)
# Function to plot P(Strike) as a function of count and on-deck wOBA
plot_effects <- function(fit) {
# Draws for the fixed effects
approx <- rstan::extract(fit, permuted = TRUE)
# Posterior means and 95% “credible intervals”
means <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
mean)
ci_low  <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
function(x) quantile(x,0.025))
ci_high <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
"beta_balls","beta_strikes",
"beta_int_balls","beta_int_strikes")],
function(x) quantile(x,0.975))
data.frame(Parameter = names(means),
Mean = means,
`2.5%` = ci_low,
`97.5%` = ci_high)
# 1) Pull out posterior draws for the fixed effects
#    (must match your stan parameter names exactly)
draws <- approx
n_draws <- length(draws$alpha)
# 2) Build a regular grid:
wseq <- seq(min(data_t_reduced$woba_on_deck_c),
max(data_t_reduced$woba_on_deck_c), length = 100)
grid <- expand.grid(woba_on_deck_c = wseq,
balls          = 0:3,
strikes        = 0:2) %>%
mutate(count = paste0(balls, "–", strikes))
# Fix all other covariates at “average” (centered) → zero
#   centered wOBA set to 0
woba_curr0  <- 0
# 3) For a subset of draws (to speed up), sample e.g. 200 indices
set.seed(42)
use_idx <- sample.int(n_draws, size = min(2000, n_draws))
# 4) Compute the linear predictor for each draw & each grid row
# 5) Transform to probabilities
p_mat <- plogis(sapply(use_idx, function(i) {
draws$alpha[i] +
draws$beta_woba[i]          * woba_curr0 +
draws$beta_woba_on_deck[i]  * grid$woba_on_deck_c +
draws$beta_balls[i]         * grid$balls +
draws$beta_strikes[i]       * grid$strikes +
draws$beta_int_balls[i]     * (grid$balls  * grid$woba_on_deck_c) +
draws$beta_int_strikes[i]   * (grid$strikes* grid$woba_on_deck_c)
}))
# 6) Summarize across draws: mean & 95% credible bands
grid <- grid %>%
mutate(p_mean = rowMeans(p_mat),
p_lo   = apply(p_mat, 1, quantile, probs = 0.025),
p_hi   = apply(p_mat, 1, quantile, probs = 0.975))
# 7) Plot faceted by count
ggplot(grid, aes(x = woba_on_deck_c/100 + mean(data_t$stabilized_xwoba_on_deck),
y = p_mean)) +
geom_ribbon(aes(ymin = p_lo, ymax = p_hi), fill = "steelblue", alpha = 0.2) +
geom_line(color = "steelblue", size = 1) +
facet_grid(strikes ~ balls, labeller = label_both) +
scale_x_continuous("On‑deck wOBA",
breaks = seq(0.25, 0.45, by = 0.05)) +
scale_y_continuous("P(strike)",
breaks = seq(0.2, 0.8, by = 0.1)) +
theme_minimal() +
ggtitle("Posterior 95% Credible Bands for P(strike) by Count as a function of On deck wOBA")
}
plot_effects(fit_zone)
