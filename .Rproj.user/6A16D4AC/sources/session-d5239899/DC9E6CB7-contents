library(rstan)
library(bayesplot)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)



## Predicting Binary Outcome in_strike_zone -----------------------------------------

stan_code_in_strike_zone <- "

data {
  int<lower=1> N;                         // total number of pitches
  int<lower=0,upper=1> y[N];              // 1 if pitch is in zone
  vector[N] woba;                         // current batter’s wOBA
  vector[N] woba_on_deck;                 // on‑deck batter’s wOBA
  int<lower=0,upper=3> balls[N];          // balls in count
  int<lower=0,upper=2> strikes[N];        // strikes in count
}


parameters {
  real alpha;
  real beta_woba;
  real beta_woba_on_deck;
  real beta_balls;
  real beta_strikes;
  real beta_int_balls;                    // interaction: balls × woba_on_deck
  real beta_int_strikes;                  // interaction: strikes × woba_on_deck


}


model {
  // Priors
  alpha              ~ normal(0, 2);
  beta_woba          ~ normal(0, 1);
  beta_woba_on_deck  ~ normal(0, 1);
  beta_balls         ~ normal(0, 1);
  beta_strikes       ~ normal(0, 1);
  beta_int_balls     ~ normal(0, 1);
  beta_int_strikes   ~ normal(0, 1);

  // Likelihood
  for (i in 1:N) {
    real nu = alpha
           + beta_woba           * woba[i]
           + beta_woba_on_deck   * woba_on_deck[i]
           + beta_balls          * balls[i]
           + beta_strikes        * strikes[i]
           + beta_int_balls      * (balls[i] * woba_on_deck[i])
           + beta_int_strikes    * (strikes[i] * woba_on_deck[i]);

    y[i] ~ bernoulli_logit(nu);
  }
}

"


data_t_reduced <- data_t %>%
  group_by(year) %>%   # preserves the class balance
  sample_frac(0.025) %>%          # adjust as needed (0.05 = 5%)
  ungroup() %>%
  as.data.frame()


stan_data <- list(N = nrow(data_t_reduced),
                  y = data_t_reduced$in_strike_zone,
                  woba = data_t_reduced$woba_c,
                  woba_on_deck = data_t_reduced$woba_on_deck_c,
                  balls = data_t_reduced$balls,
                  strikes = data_t_reduced$strikes,
                  outs = data_t_reduced$outs,
                  runners_on = data_t_reduced$runners_on_base,
                  N_pitchers = length(unique(as.integer(factor(
                    data_t_reduced$pitcher_id)))),
                  N_batters = length(unique(as.integer(factor(
                    data_t_reduced$batter_id)))),
                  pitcher_id = as.integer(factor(data_t_reduced$pitcher_id)),
                  batter_id = as.integer(factor(data_t_reduced$batter_id)))


# Variational Bayes (quicker for full data)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
vb_fit <- vb(object         = stan_model(model_code = stan_code_in_strike_zone),
             data           = stan_data,
             algorithm      = "meanfield",    # the default
             output_samples = 1000,           # how many draws you want
             seed           = 123)


# Function to plot P(Strike) as a function of count and on-deck wOBA
plot_effects <- function(fit) {
  
  # Draws for the fixed effects
  approx <- rstan::extract(fit, permuted = TRUE)
  
  
  # Posterior means and 95% “credible intervals”
  means <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
                           "beta_balls","beta_strikes",
                           "beta_int_balls","beta_int_strikes")],
                  mean)
  ci_low  <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
                             "beta_balls","beta_strikes",
                             "beta_int_balls","beta_int_strikes")], 
                    function(x) quantile(x,0.025))
  ci_high <- sapply(approx[c("alpha","beta_woba","beta_woba_on_deck",
                             "beta_balls","beta_strikes",
                             "beta_int_balls","beta_int_strikes")], 
                    function(x) quantile(x,0.975))
  
  data.frame(Parameter = names(means),
             Mean = means,
             `2.5%` = ci_low,
             `97.5%` = ci_high)
  
  
  # 1) Pull out posterior draws for the fixed effects
  #    (must match your stan parameter names exactly)
  draws <- approx
  n_draws <- length(draws$alpha)
  
  
  # 2) Build a regular grid:
  wseq <- seq(min(data_t_reduced$woba_on_deck_c), 
              max(data_t_reduced$woba_on_deck_c), length = 100)
  grid <- expand.grid(woba_on_deck_c = wseq,
                      balls          = 0:3,
                      strikes        = 0:2) %>%
    mutate(count = paste0(balls, "–", strikes))
  
  # Fix all other covariates at “average” (centered) → zero
  #   centered wOBA set to 0
  woba_curr0  <- 0
  
  
  # 3) For a subset of draws (to speed up), sample e.g. 200 indices
  set.seed(42)
  use_idx <- sample.int(n_draws, size = min(2000, n_draws))
  
  
  # 4) Compute the linear predictor for each draw & each grid row
  # 5) Transform to probabilities
  p_mat <- plogis(sapply(use_idx, function(i) {
    draws$alpha[i] +
      draws$beta_woba[i]          * woba_curr0 +
      draws$beta_woba_on_deck[i]  * grid$woba_on_deck_c +
      draws$beta_balls[i]         * grid$balls +
      draws$beta_strikes[i]       * grid$strikes +
      draws$beta_int_balls[i]     * (grid$balls  * grid$woba_on_deck_c) +
      draws$beta_int_strikes[i]   * (grid$strikes* grid$woba_on_deck_c)
  }))
  
  
  # 6) Summarize across draws: mean & 95% credible bands
  grid <- grid %>%
    mutate(p_mean = rowMeans(p_mat),
           p_lo   = apply(p_mat, 1, quantile, probs = 0.025),
           p_hi   = apply(p_mat, 1, quantile, probs = 0.975))
  
  
  # 7) Plot faceted by count
  ggplot(grid, aes(x = woba_on_deck_c/100 + mean(data_t$stabilized_xwoba_on_deck), 
                   y = p_mean)) +
    geom_ribbon(aes(ymin = p_lo, ymax = p_hi), fill = "steelblue", alpha = 0.2) +
    geom_line(color = "steelblue", size = 1) +
    facet_grid(strikes ~ balls, labeller = label_both) +
    scale_x_continuous("On‑deck wOBA", 
                       breaks = seq(0.25, 0.45, by = 0.05)) +
    scale_y_continuous("P(strike)", 
                       breaks = seq(0.2, 0.8, by = 0.1)) +
    theme_minimal() +
    ggtitle("Posterior 95% Credible Bands for P(strike) by Count as a function of On deck wOBA")
  
}


plot_effects(vb_fit)






#####
# MCMC Sampler
#####
fit_zone <- stan(model_code = stan_code_in_strike_zone,
                 data = stan_data,
                 iter = 2000,
                 warmup = 1000,
                 chains = 4,
                 seed = 42,
                 control = list(adapt_delta = 0.95),
                 cores = parallel::detectCores())


print(fit_zone, pars = c("alpha", "beta_woba", "beta_woba_on_deck", 
                         "beta_balls", "beta_strikes", 
                         "beta_int_balls", "beta_int_strikes"), 
      probs = c(0.025, 0.5, 0.975))



plot_effects(fit_zone)









